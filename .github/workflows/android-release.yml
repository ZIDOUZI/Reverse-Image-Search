name: Android Release

on:
  push:
    tags: [ '*' ]  # 当推送任何标签时触发
    branches: [ 'main' ]  # 仅在 main 分支上触发
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: 1.0.0)'
        required: false
        default: ''
      version_name:
        description: '版本名称 (例如: NoInfo)'
        required: false
        default: ''
      increment_version_code:
        description: '是否增加版本号'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      changelog:
        description: '变更日志 (支持 Markdown 格式)'
        required: false
        default: ''

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取所有历史记录和标签

      - name: 设置 JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: 设置 Gradle 权限
        run: chmod +x ./gradlew

      - name: 获取当前版本信息
        id: get_current_version
        run: |
          VERSION_CODE=${{ vars.VERSION_CODE || 1 }}
          
          # 处理版本号，优先使用手动输入的版本号或从标签中提取
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [ "${{ github.event_name }}" = "push" ]; then
            # 从标签中提取版本号
            TAG_VERSION="${GITHUB_REF#refs/tags/}"
              VERSION="${TAG_VERSION}"
          else
            echo "Version Not Defined"
            exit 1
          fi
          
          # 处理版本名称，优先使用手动输入的版本名称
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version_name }}" ]; then
            VERSION_NAME="${{ github.event.inputs.version_name }}"
          else
            VERSION_NAME="${{ vars.VERSION_NAME || 'NoInfo' }}"
          fi
          
          # 获取标签名称
          if [ "${{ github.event_name }}" = "push" ]; then
            TAG="v${VERSION}-${VERSION_NAME}"
          else
            TAG="v${VERSION}-${VERSION_NAME}-manual${VERSION_CODE}"
          fi
          
          echo "current_version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT
          echo "current_version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          
      - name: 计算新版本号
        id: calculate_new_version
        run: |
          # 根据是否需要增加版本号决定新版本号
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.increment_version_code }}" = "false" ]; then
            NEW_VERSION_CODE=${{ steps.get_current_version.outputs.current_version_code }}
          else
            NEW_VERSION_CODE=$((${{ steps.get_current_version.outputs.current_version_code }} + 1))
          fi
          echo "new_version_code=$NEW_VERSION_CODE" >> $GITHUB_OUTPUT

      - name: 生成变更日志
        id: generate_changelog
        run: |
          # 优先使用手动输入的变更日志
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.changelog }}" ]; then
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "${{ github.event.inputs.changelog }}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            # 从最近的提交信息生成变更日志
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "### 最近提交记录" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            if [ "${{ github.event_name }}" = "push" ]; then
              # 获取上一个标签到当前标签之间的提交
              PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
              if [ -n "$PREV_TAG" ]; then
                git log --pretty=format:"- %s (%an)" $PREV_TAG..HEAD | head -n 10 >> $GITHUB_OUTPUT
              else
                git log --pretty=format:"- %s (%an)" -n 10 >> $GITHUB_OUTPUT
              fi
            else
              # 获取最近的提交
              git log --pretty=format:"- %s (%an)" -n 10 >> $GITHUB_OUTPUT
            fi
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
          
          # 提取主要更新内容
          echo "update_content<<EOF" >> $GITHUB_OUTPUT
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.changelog }}" ]; then
            # 如果有手动输入的变更日志，提取前三行作为主要更新内容
            echo "${{ github.event.inputs.changelog }}" | head -n 3 >> $GITHUB_OUTPUT
          else
            # 从最近的提交中提取关键更新内容
            if [ "${{ github.event_name }}" = "push" ]; then
              PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
              if [ -n "$PREV_TAG" ]; then
                git log --pretty=format:"- %s" $PREV_TAG..HEAD | grep -i -E '(添加|修复|优化|更新|改进|新增|feat|fix|improve|update|enhance)' | head -n 5 >> $GITHUB_OUTPUT
              else
                git log --pretty=format:"- %s" -n 10 | grep -i -E '(添加|修复|优化|更新|改进|新增|feat|fix|improve|update|enhance)' | head -n 5 >> $GITHUB_OUTPUT
              fi
            else
              git log --pretty=format:"- %s" -n 10 | grep -i -E '(添加|修复|优化|更新|改进|新增|feat|fix|improve|update|enhance)' | head -n 5 >> $GITHUB_OUTPUT
            fi
          fi
          # 如果没有找到任何匹配的提交，添加默认内容
          if [ -z "$(cat $GITHUB_OUTPUT | grep '- ')" ]; then
            echo "- 自动构建发布" >> $GITHUB_OUTPUT
          fi
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: 解码签名文件
        run: |
          mkdir -p app
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > app/keystore.jks

      - name: 创建 keystore.properties
        run: |
          echo "STORE_FILE=keystore.jks" > keystore.properties
          echo "STORE_PASSWORD=${{ secrets.STORE_PASSWORD }}" >> keystore.properties
          echo "RELEASE_ALIAS=${{ secrets.RELEASE_ALIAS }}" >> keystore.properties
          echo "RELEASE_PASSWORD=${{ secrets.RELEASE_PASSWORD }}" >> keystore.properties
          echo "DEBUG_ALIAS=${{ secrets.DEBUG_ALIAS }}" >> keystore.properties
          echo "DEBUG_PASSWORD=${{ secrets.DEBUG_PASSWORD }}" >> keystore.properties
          echo "VERSION_CODE=${{ steps.calculate_new_version.outputs.new_version_code }}" >> keystore.properties
          echo "VERSION=${{ steps.get_current_version.outputs.current_version }}" >> keystore.properties
          echo "VERSION_NAME=${{ steps.get_current_version.outputs.current_version_name }}" >> keystore.properties

      - name: 构建发布版本
        run: ./gradlew assembleRelease

      - name: 创建 Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_current_version.outputs.tag }}
          name: "Release v${{ steps.get_current_version.outputs.current_version }} (版本号: ${{ steps.calculate_new_version.outputs.new_version_code }})"
          draft: false
          prerelease: false
          files: |
            app/build/outputs/apk/release/app-release.apk
          body: |
            ## 版本 ${{ steps.get_current_version.outputs.current_version }}-${{ steps.get_current_version.outputs.current_version_name }}
            
            ### 版本信息
            - 版本号: ${{ steps.get_current_version.outputs.current_version }}
            - 版本名称: ${{ steps.get_current_version.outputs.current_version_name }}
            - 构建号: ${{ steps.calculate_new_version.outputs.new_version_code }}
            
            ### 变更日志
            ${{ steps.generate_changelog.outputs.changelog }}
            
            ### 更新内容
            ${{ steps.generate_changelog.outputs.update_content }}

      - name: 更新版本变量
        uses: mmoyaferrer/set-github-variable@v1.0.0
        with:
          name: VERSION_CODE
          value: ${{ steps.calculate_new_version.outputs.new_version_code }}
          token: ${{ secrets.ACCESS_TOKEN }}
